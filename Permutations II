public class Solution {
    public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) 
    {  
        Arrays.sort(num);
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> nums = new ArrayList<Integer>();
        ArrayList<Integer> perm = new ArrayList<Integer>();
        for(int i=0; i<num.length; i++)
            nums.add(num[i]);
        getone(perm, nums, res);
        return res;
    }
    
    private void getone(ArrayList<Integer> perm, ArrayList<Integer> nums, ArrayList<ArrayList<Integer>> res)
    {
        if(nums.isEmpty())
        {
            ArrayList<Integer> temp = new ArrayList<Integer>(perm);
            res.add(temp);
        }
        for(int i=0; i<nums.size(); i++)
        {
            Integer tempint = nums.get(i);
            perm.add(tempint);
            nums.remove(i);
            getone(perm, nums, res);
            perm.remove(perm.size()-1);
            nums.add(i, tempint);
            while(i<nums.size()-1&&nums.get(i)==nums.get(i+1))
                i++;
        }
    }
}
