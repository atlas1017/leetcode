public class Solution {
    public int maxProfit(int[] prices) 
    {
        
        int len = prices.length;
        
        if(len <= 1)
            return 0;
          
        int profit = 0;  
        if(len == 2)
        {
            if(prices[1] - prices[0] > 0)
                profit = prices[1] - prices[0];
        }
        
        int[] maxp1 = new int[len];
        int[] maxp2 = new int[len];


        // p1 is for trade searhing from start
        // maxp1[pos] = pro(0, pos, prices)
        maxp1[0] = 0;
        maxp1[1] = 0;
        for(int i = 1; i < len-1; i++)
        {
            if(prices[i] <= prices[i-1])
            maxp1[i+1] = maxp1[i];
            else
                maxp1[i+1] = pro(0, i+1, prices);
        }
        // maxp2[pos] = pro(pos, len, prices)
        maxp2[len-1] = 0; 
        for(int i = len-1; i > 0; i--)
        {
            if(prices[i-1] >= prices[i])
                maxp2[i-1] = maxp2[i];
            else
                maxp2[i-1] = pro(i-1, len, prices);
        }
        
        int pos;
        profit = prices[len-1] - prices[0];
        for(pos = 1; pos < len; pos++)
        {
            if(maxp1[pos] + maxp2[pos] > profit)
                profit = maxp1[pos] + maxp2[pos];
        }
        return profit;
    }
    
    private int pro(int a, int b, int[] prices)
    {
        if(a==b)
            return 0;
            
        int i, min, maxdiff;
        min = prices[a];
        maxdiff = 0;
        for(i = a; i < b; i++)
        {
            if(prices[i] - min > maxdiff)
                maxdiff = prices[i] - min;
            if(prices[i] < min)
                min = prices[i];
        }
        return maxdiff;   
    }
}
