public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] num) 
    {  
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> nums = new ArrayList<Integer>();
        ArrayList<Integer> perm = new ArrayList<Integer>();
        for(int i=0; i<num.length; i++)
            nums.add(num[i]);
        getone(perm, nums, res);
        return res;
    }
    
    private void getone(ArrayList<Integer> perm, ArrayList<Integer> nums, ArrayList<ArrayList<Integer>> res)
    {
        if(nums.isEmpty()&&!res.contains(perm))
            res.add(perm);
        for(int i=0; i<nums.size(); i++)
        {
            ArrayList<Integer> tempperm = new ArrayList<Integer> (perm);
            ArrayList<Integer> tempnums = new ArrayList<Integer> (nums);
            Integer temp = nums.get(i);
            tempperm.add(temp);
            tempnums.remove(i);
            getone(tempperm, tempnums, res);
        }
    }
}
